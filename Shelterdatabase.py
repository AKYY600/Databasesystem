from flask import Flask, requestfrom flask import jsonifyfrom flask_mysqldb import MySQLfrom flask_cors import CORSfrom datetime import datefrom flask_jwt_extended import (    JWTManager, jwt_required, create_access_token,    jwt_refresh_token_required, create_refresh_token,    get_jwt_identity, set_access_cookies, set_refresh_cookies, unset_jwt_cookies) from werkzeug.security import safe_str_cmp app = Flask(__name__)CORS(app, resources=r'/*', supports_credentials=True)app.config['MYSQL_HOST'] = 'localhost'app.config['MYSQL_USER'] = 'root'app.config['MYSQL_PASSWORD'] = 'JINGwen_382'app.config['MYSQL_DB'] = 'db1'  app.config['JWT_TOKEN_LOCATION'] = ['cookies']app.config['JWT_COOKIE_CSRF_PROTECT'] = False app.config['JWT_SECRET_KEY'] = 'super-secret'  # Change this!jwt = JWTManager(app)mysql = MySQL(app) @app.route('/token/auth', methods=['POST'])def login():    if not request.is_json:        return jsonify({"msg": "Missing JSON in request"}),      params = request.get_json()    username = params.get('username', None)    password = params.get('password', None)     if not username:        return jsonify({"msg": "Missing username parameter"}), 400    if not password:        return jsonify({"msg": "Missing password parameter"}), 400     login_query = "SELECT password, is_volunteer, is_owner, is_employee FROM User WHERE username='{}';".format(username)    try:        cur = mysql.connection.cursor()        cur.execute(login_query)        rv = cur.fetchall()    except Exception:        return jsonify({"msg": "Fail to fetch user data"}), 500    else:        if rv:            password_record = rv[0][0]            if not safe_str_cmp(password_record, password):                 return jsonify({"msg": "Invalid credentials"}), 401                else:            return jsonify({"msg": "Invalid credentials"}), 401          is_volunteer = rv[0][1]    is_owner = rv[0][2]     is_employee = rv[0][3]    user_rule = ""    if is_volunteer:        user_rule = 'volunteer'    elif is_owner:        user_rule = 'owner'    elif is_employee:        user_rule = 'employee'    ret = jsonify({'username': username, 'user_type': user_rule})    access_token = create_access_token(identity=username)    refresh_token = create_refresh_token(identity=username)    set_access_cookies(ret, access_token)    set_refresh_cookies(ret, refresh_token)    return ret, 200 @app.route('/token/refresh', methods=['POST'])@jwt_refresh_token_requireddef refresh():    # Create the new access token    current_user = get_jwt_identity()    check_user_rule_query = "SELECT is_volunteer, is_owner, is_employee FROM User WHERE User.username='{}'".format(current_user)    try:        cur = mysql.connection.cursor()        cur.execute(check_user_rule_query)        rv = cur.fetchall()    except Exception:        return jsonify({"msg": "Fail to fetch user data"}), 400    else:        is_volunteer = rv[0][0]        is_owner = rv[0][1]        is_employee = rv[0][2]        user_rule = ""        if is_volunteer:            user_rule = 'volunteer'        elif is_owner:            user_rule = 'owner'        elif is_employee:            user_rule = 'employee'        ret = jsonify({'username':current_user, 'user_type': user_rule})     access_token = create_access_token(identity=current_user)    set_access_cookies(ret, access_token)    return ret, 200 @app.route('/token/remove', methods=['POST'])def logout():    resp = jsonify({'logout': True})    unset_jwt_cookies(resp)    return resp, 200 @app.route('/animals')def home():    try:        ANIMAL_DASHBOARD_SQL1="""CREATE TEMPORARY TABLE Table1            SELECT petID, 1 AS adoptability FROM (SELECT petID FROM (SELECT COUNT(DISTINCT a.type)            AS count,petID FROM Vaccine a, Vaccination b WHERE required_for_adopt=1 AND a.type=b.type            GROUP BY petID HAVING count=5) a) b WHERE petID IN            (SELECT petID FROM Animal WHERE petID NOT IN (SELECT petID FROM Adoption) AND alternation_status=1);"""         ANIMAL_DASHBOARD_SQL2="""CREATE TEMPORARY TABLE Table2            SELECT Animal.petID, IFNULL(Table1.adoptability,0) AS adoptability FROM Animal            LEFT JOIN Table1 ON Animal.petID=Table1.petID WHERE Animal.petID NOT IN (SELECT Adoption.petID FROM Adoption);"""         ANIMAL_DASHBOARD_SQL3="""CREATE TEMPORARY TABLE Table3            SELECT Animal.petID, Animal.name, Animal.species, Animal.sex, Animal.alternation_status, Animal.age, GROUP_CONCAT(breed_name SEPARATOR '/') AS breed_name FROM BreedAnimal, Animal WHERE BreedAnimal.petID=Animal.petID GROUP BY petID;"""         ANIMAL_DASHBOARD_SQL4="""SELECT Table3.petID, Table3.name, Table3.species, Table3.sex, Table3.alternation_status, Table3.age, Table3.breed_name, Table2.adoptability FROM Table2, Table3 WHERE Table2.petID=Table3.petID;"""         cur = mysql.connection.cursor()        cur.execute(ANIMAL_DASHBOARD_SQL1)        cur.execute(ANIMAL_DASHBOARD_SQL2)        cur.execute(ANIMAL_DASHBOARD_SQL3)        cur.execute(ANIMAL_DASHBOARD_SQL4)        rv = cur.fetchall()    except Exception:        return {}, 501     else:        final_result = list()        for row in rv:            row_result = dict()            row_result['petID'] = row[0]            row_result['name'] = row[1]            row_result['species'] = row[2]            row_result['sex'] = row[3]            if row[4]:                row_result['alterationStatus'] = 'yes'            else:                row_result['alterationStatus'] = 'no'            row_result['age'] = row[5]            row_result['breeds'] = row[6]            row_result['adoptability'] = row[7]            final_result.append(row_result)            return jsonify({'animals': final_result}), 200 @app.route('/species')def species():    cur = mysql.connection.cursor()    ADD_ANIMAL_SQL1="""SELECT species_type FROM Species;"""    cur.execute(ADD_ANIMAL_SQL1)    rv = cur.fetchall()    species_list = list()    for row in rv:        species_list.append(row[0])    return jsonify({'species': species_list}) @app.route('/species-count')def countBySpecies():    cur = mysql.connection.cursor()    ANIMAL_DASHBOARD_SQL7="SELECT species, count(petID) AS counts FROM Animal WHERE Animal.petID NOT IN (SELECT Adoption.petID FROM Adoption) GROUP BY species;"    cur.execute(ANIMAL_DASHBOARD_SQL7)    rv = cur.fetchall()    species_count = list()    for row in rv:        species = dict()        species['species'] = row[0]        species['count'] = row[1]        species_count.append(species)     ADD_ANIMAL_SQL1="""SELECT species_type FROM Species;"""    cur.execute(ADD_ANIMAL_SQL1)    rv = cur.fetchall()    species_list = list()    for row in rv:         species_list.append(row[0])       species_count_list = [ sub['species'] for sub in species_count ]     for species in species_list:        if species not in species_count_list:            species_update = dict()            species_update['species'] = species            species_update['count'] = 0            species_count.append(species_update)     return jsonify({"count": species_count}) @app.route('/breed-by-species')def breedBySpecies():    species = request.args.get('species')    cur = mysql.connection.cursor()    ADD_ANIMAL_SQL3="""SELECT breed_name From Breed Where species='{}';"""    query = ADD_ANIMAL_SQL3.format(species)    cur.execute(query)    rv = cur.fetchall()    breed_list = list()    for row in rv:        if not (row[0] == 'Mixed' or row[0] == 'Unknown'):            breed_list.append(row[0])    return jsonify({'breeds': breed_list}) @app.route('/add-animal', methods=['POST'])def addAnimal():    data = request.json    try:        mysql.connection.autocommit = False        cur = mysql.connection.cursor()        if data.get("microchip_id"):            microchip_id = data.get("microchip_id")            ADD_ANIMAL_SQL4="""INSERT INTO Animal (name, species, sex, alternation_status, age, description, microchip_id,                    surrender_employee_username, surrender_date, reason, by_animal_control) VALUES                    ('{}','{}','{}','{}',{},'{}','{}','{}','{}','{}',{});                    """            query = ADD_ANIMAL_SQL4.format(data.get('name'), data.get('species'), data.get(                'sex'), data.get('alternation_status'), data.get('age'), data.get(                'description'),microchip_id, data.get('login_username'), data.get(                'surrender_date'),data.get("reason"),data.get("by_animal_control"))        else:            ADD_ANIMAL_SQL5="""INSERT INTO Animal (name, species, sex, alternation_status, age, description,                surrender_employee_username, surrender_date, reason, by_animal_control) VALUES                ('{}','{}','{}','{}',{},'{}','{}','{}','{}',{});"""            query = ADD_ANIMAL_SQL5.format(data.get('name'), data.get('species'), data.get(                'sex'), data.get('alternation_status'), data.get('age'), data.get(                'description'),data.get('login_username'), data.get(                'surrender_date'),data.get("reason"),data.get("by_animal_control"))         breeds = data.get('breeds')        cur.execute(query)        petID = cur.lastrowid        for breed in breeds:            ADD_ANIMAL_SQL6 = "INSERT INTO BreedAnimal (breed_name, petID) Values ('{}', {});"            add_breed_query = ADD_ANIMAL_SQL6.format(breed, petID)            cur.execute(add_breed_query)        mysql.connection.commit()        return jsonify({"petID": petID}), 201    except Exception as e:        mysql.connection.rollback()        return {}, 501 @app.route('/animal-detail')def animalDetail():    petID = request.args.get('petID')    cur = mysql.connection.cursor()    ANIMAL_DETAIL_SQL1 = """SELECT a.petID, a.name, a.species, a.sex, a.alternation_status,            a.age, a.description, a.microchip_id, a.surrender_employee_username, a.surrender_date,            a.reason, a.by_animal_control, s.breed_types FROM Animal  a INNER JOIN            (SELECT petID, GROUP_CONCAT(breed_name SEPARATOR '/') as breed_types FROM BreedAnimal GROUP BY petID) s ON a.petID=s.petID WHERE a.petID={};            """    query = ANIMAL_DETAIL_SQL1.format(petID)    cur.execute(query)    rv = cur.fetchall()    animal_detail = dict()    if rv:        animal_detail["name"] = rv[0][1]        animal_detail["species"] = rv[0][2]        animal_detail["sex"] = rv[0][3]        animal_detail["alternation_status"] = rv[0][4]        animal_detail["age"] = rv[0][5]        animal_detail["description"] = rv[0][6]        animal_detail["microchip_id"] = rv[0][7]        animal_detail["surrender_employee_username"] = rv[0][8]        animal_detail["surrender_date"] = rv[0][9].strftime("%Y-%m-%d")        animal_detail["reason"] = rv[0][10]        animal_detail["by_animal_control"] = rv[0][11]        animal_detail["breeds"] = rv[0][12]     ANIMAL_DETAIL_SQL2 = """SELECT username, date_taken, expiration_date, vaccination_number, type FROM Vaccination WHERE petID={};"""    query_vaccination = ANIMAL_DETAIL_SQL2.format(petID)    cur.execute(query_vaccination)    rv_vaccination = cur.fetchall()    vaccination_list = list()    for row in rv_vaccination:        vaccination_dict = dict()        vaccination_dict["username"] = row[0]        vaccination_dict["date_taken"] = row[1].strftime("%Y-%m-%d")        vaccination_dict["expiration_date"] = row[2].strftime("%Y-%m-%d")        vaccination_dict["vaccination_number"] = row[3]        vaccination_dict["type"] = row[4]        vaccination_list.append(vaccination_dict)    animal_detail["vaccinations"] = vaccination_list             return jsonify({"animal-detail": animal_detail})    @app.route('/vaccine-by-species')def vaccineBySpecies():    species = request.args.get('species')    cur = mysql.connection.cursor()    ADD_VACCINATION_SQL1 = """SELECT type FROM Vaccine WHERE species='{}'"""    query = ADD_VACCINATION_SQL1.format(species)    cur.execute(query)    rv = cur.fetchall()    vaccine_list = list()    for row in rv:        vaccine_list.append(row[0])    return jsonify({"vaccines": vaccine_list}) @app.route('/add-vaccination', methods=['POST'])def addVaccination():    data = request.json    try:        cur = mysql.connection.cursor()        if data.get('vaccinationNum'):            ADD_VACCINATION_SQL2 = """INSERT INTO Vaccination (petID, username, date_taken, expiration_date, type, vaccination_number)VALUES ({}, '{}', '{}', '{}', '{}', '{}');"""            query = ADD_VACCINATION_SQL2.format(data.get('petID'), data.get('username'), data.get(            'date_taken'), data.get('expiration_date'), data.get('type'), data.get('vaccinationNum'))                else:            ADD_VACCINATION_SQL3 = """INSERT INTO Vaccination (petID, username, date_taken, expiration_date, type)VALUES ({}, '{}', '{}', '{}', '{}');"""            query = ADD_VACCINATION_SQL3.format(data.get('petID'), data.get('username'), data.get(            'date_taken'), data.get('expiration_date'), data.get('type'))                        cur.execute(query)        mysql.connection.commit()        return jsonify(data), 201    except Exception as e:        return {}, 501        @app.route('/update-animal-detail', methods=['POST'])def updateAnimalDetail():    data = request.json    try:        mysql.connection.autocommit = False        cur = mysql.connection.cursor()        petID = data.get("petID")        if data.get('breeds'):            delete_breed_query = "DELETE FROM BreedAnimal WHERE petID={};".format(petID)            cur.execute(delete_breed_query)            for breed in data.get('breeds'):                ADD_ANIMAL_SQL6 = "INSERT INTO BreedAnimal (breed_name, petID) Values ('{}', {});"                add_breed_query = ADD_ANIMAL_SQL6.format(breed, petID)                cur.execute(add_breed_query)         if data.get('sex'):            update_sex_query="UPDATE Animal SET sex='{}' WHERE petID={};".format(data.get('sex'), petID)            cur.execute(update_sex_query)                if data.get('alterationStatus'):            update_alterationStatus_query = "UPDATE Animal SET alternation_status='{}' WHERE petID={};".format(data.get('alterationStatus'), petID)            cur.execute(update_alterationStatus_query)                if data.get('microchipID'):            update_microchipID_query = "UPDATE Animal SET microchip_id='{}' WHERE petID={};".format(data.get('microchipID'), petID)            cur.execute(update_microchipID_query)        mysql.connection.commit()        return jsonify({"petID": petID}), 201    except Exception as e:        mysql.connection.rollback()        return {}, 501 @app.route('/check-vaccination-expire', methods=['POST'])def checkVaccinationExpire():    data = request.json    petID = data.get('petID')    vaccine_type = data.get('vaccine_type')    query = "SELECT MAX(expiration_date) FROM Vaccination WHERE petID={} AND type='{}';".format(petID, vaccine_type)    try:        cur = mysql.connection.cursor()        cur.execute(query)        rv = cur.fetchall()        if rv[0][0]:            today = date.today()            if today >= rv[0][0]:                return jsonify({"expiration_status": True})            else:                return jsonify({"expiration_status": False})        else:            return jsonify({"expiration_status": True})    except Exception as e:        return {}, 501    @app.route('/check-adoptor-exist', methods=['POST'])def check_adoptor_exist():    data = request.json    email = data.get('email')    query = "SELECT * FROM Adoptor WHERE email='{}'".format(email)    try:        cur = mysql.connection.cursor()        cur.execute(query)        rv = cur.fetchall()        if rv:            adoptor_info = dict()            adoptor_info["applicant_last_name"] = rv[0][0]            adoptor_info["applicant_first_name"] = rv[0][1]            adoptor_info["a_street_addr"] = rv[0][2]            adoptor_info["a_city"] = rv[0][3]            adoptor_info["a_state"] = rv[0][4]            adoptor_info["a_postal_code"] = rv[0][5]            adoptor_info["phone"] = rv[0][6]            return jsonify({"adopt_exist": True, "adoptor": adoptor_info})        else:            return jsonify({"adopt_exist": False})    except Exception as e:        return {}, 501 @app.route('/add-adopt-application', methods=['POST'])def add_adopt_application():    data = request.json    new_adoptor = data.get('new_adoptor')    cur = mysql.connection.cursor()    application_id = ""    if new_adoptor:        add_adoptor_query = """INSERT INTO Adoptor (applicant_last_name, applicant_first_name, a_street_addr, a_city, a_state, a_postal_code, phone, email) VALUES ('{}', '{}', '{}', '{}', '{}', '{}', '{}', '{}');""".format(data.get('ap_l_name'), data.get(                    'ap_f_name'), data.get('street'), data.get('city'), data.get('state'), data.get('postal'), data.get('phone'), data.get('email'))        add_adopt_application_query = "INSERT INTO AdoptApplication (applicant_email, application_date, is_approved, is_rejected) VALUES ('{}','{}', 0, 0);".format(                    data.get('email'), data.get('applicant_date')                )        cur.execute(add_adoptor_query)        cur.execute(add_adopt_application_query)        application_id = cur.lastrowid        mysql.connection.commit()    else:        add_adopt_application_query = "INSERT INTO AdoptApplication (applicant_email, application_date, is_approved, is_rejected) VALUES ('{}','{}', 0, 0)".format(                    data.get('email'), data.get('applicant_date')                )        cur.execute(add_adopt_application_query)        application_id = cur.lastrowid        mysql.connection.commit()    if data.get('co_ap_l_name') and data.get('co_ap_f_name'):        update_co_info_query = "UPDATE AdoptApplication SET co_applicant_last_name='{}', co_applicant_first_name='{}' WHERE application_number='{}';".format(data.get('co_ap_l_name'), data.get('co_ap_f_name'), application_id)        cur.execute(update_co_info_query)        mysql.connection.commit()     return jsonify({"app_id": application_id})  @app.route('/get-pending-application')def fetch_pending_application():    query = "SELECT A.applicant_last_name, A.applicant_first_name, A.a_street_addr, A.a_city,A.a_state,A.a_postal_code, A.phone, A.email, B.application_date, B.co_applicant_last_name, B.co_applicant_first_name, B.application_number from Adoptor A, AdoptApplication B  where A.email=B.applicant_email and B.is_approved=0 and B.is_rejected=0;"    cur = mysql.connection.cursor()    cur.execute(query)    rv = cur.fetchall()    final_result = list()    for row in rv:        row_result = dict()        row_result["applicant_last_name"] = row[0]        row_result["applicant_first_name"] = row[1]        row_result["address"] = ", ".join([row[2], row[3], row[4], row[5]])        row_result["phone"] = row[6]        row_result["email"] = row[7]        row_result["application_date"] = row[8].strftime("%Y-%m-%d")        row_result["co_applicant_last_name"] = row[9]        row_result["co_applicant_first_name"] = row[10]        row_result["application_num"] = row[11]        final_result.append(row_result)     return jsonify({"pending_application":final_result})  @app.route('/process-application', methods=['POST'])def process_application():    data = request.json    action = data.get("action")    if action == 'approve':        query = "UPDATE AdoptApplication SET is_approved=1 WHERE application_number={};".format(data.get("application_number"))    elif action == 'reject':        query = "UPDATE AdoptApplication SET is_rejected=1 WHERE application_number={};".format(data.get("application_number"))    try:         cur = mysql.connection.cursor()        cur.execute(query)        mysql.connection.commit()    except Exception as e:        return {}, 501    else:        return jsonify({"ret": "success"}), 200 @app.route('/search-adoptor', methods=['POST'])def search_adoptor():    data = request.json    search = data.get("search")    query = "SELECT A.applicant_last_name, A.applicant_first_name, A.a_city, A.a_city, A.a_state, A.a_postal_code, A.phone, A.email, B.application_number, B.application_date, B.co_applicant_last_name, B.co_applicant_first_name FROM Adoptor A, AdoptApplication B where A.email=B.applicant_email and B.is_approved=1 AND (A.applicant_last_name LIKE '%{}%' or A.applicant_first_name LIKE '%{}%' or B.co_applicant_last_name LIKE '%{}%' or B.co_applicant_first_name LIKE '%{}%');".format(search, search, search, search)    cur = mysql.connection.cursor()    cur.execute(query)    rv = cur.fetchall()    final_result= list()    for row in rv:        row_result = dict()        row_result["applicant_last_name"] = row[0]        row_result["applicant_first_name"] = row[1]        row_result["address"] = ", ".join([row[2], row[3], row[4], row[5]])        row_result["phone"] = row[6]        row_result["email"] = row[7]        row_result["application_date"] = row[9]        row_result["co_applicant_last_name"] = row[10]        row_result["co_applicant_first_name"] = row[11]        row_result["application_num"] = row[8]        final_result.append(row_result)        return jsonify({"search_result":final_result}) @app.route('/add-adoption', methods=['POST'])def add_adoption():    data = request.json    query = "INSERT INTO Adoption (petID, application_number, adoption_date, adoption_fee) VALUES ({}, {}, '{}', '{}');".format(data.get('petID'), data.get('appID'), data.get('AdoptionDate'), data.get('adoptionFee'))    try:        cur = mysql.connection.cursor()        cur.execute(query)        mysql.connection.commit()    except Exception as e:        return {}, 501    else:        return jsonify({"ret": "success"}), 200 @app.route('/animal-control-count')def animal_control_report():    query1 = "CREATE TEMPORARY TABLE Table4 SELECT YEAR(CURDATE()- INTERVAL 6 MONTH) as year, MONTH(CURDATE()- INTERVAL 6 MONTH) as month UNION SELECT YEAR(CURDATE()- INTERVAL 5 MONTH) as year, MONTH(CURDATE()- INTERVAL 5 MONTH) AS month UNION SELECT YEAR(CURDATE()- INTERVAL 4 MONTH) as year, MONTH(CURDATE()- INTERVAL 4 MONTH) AS month UNION SELECT YEAR(CURDATE()- INTERVAL 3 MONTH) as year, MONTH(CURDATE()- INTERVAL 3 MONTH) AS month UNION SELECT YEAR(CURDATE()- INTERVAL 2 MONTH) as year, MONTH(CURDATE()- INTERVAL 2 MONTH) AS month UNION SELECT YEAR(CURDATE()- INTERVAL 1 MONTH) as year, MONTH(CURDATE()- INTERVAL 1 MONTH) AS month UNION SELECT YEAR(CURDATE()) as year, MONTH(CURDATE()) AS month;"    query2 = "CREATE TEMPORARY TABLE Table5 SELECT YEAR(surrender_date) AS year, MONTH(surrender_date) AS month, IFNULL(COUNT(by_animal_control),0) AS counts  FROM Animal  WHERE by_animal_control=1  AND DATE(surrender_date)  BETWEEN DATE_ADD(DATE_ADD(LAST_DAY(NOW()),INTERVAL 1 DAY),INTERVAL - 7 MONTH) AND curdate()  GROUP BY month, year;"    query3 = """CREATE TEMPORARY TABLE Table6                 SELECT b.petID, b.month, b.year                 FROM (                    SELECT surrender_date, Animal.petID, adoption_date                     FROM Animal INNER JOIN Adoption                     ON Animal.petID=Adoption.petID                     WHERE DATEDIFF(adoption_date, surrender_date) >=60                ) a                INNER JOIN                 (                    SELECT  petID, MONTH(adoption_date) AS month, YEAR(adoption_date) AS year                     FROM Adoption                    WHERE adoption_date IS NOT NULL                     AND DATE(adoption_date)                     BETWEEN DATE_ADD(DATE_ADD(LAST_DAY(NOW()),INTERVAL 1 DAY),INTERVAL - 7 MONTH)                     AND curdate()                 ) b                 ON a.petID=b.petID;                """    query4 = "CREATE TEMPORARY TABLE Table7 SELECT year, month, COUNT(petID) AS counts FROM Table6 GROUP BY year, month;"    query5 = "CREATE TEMPORARY TABLE Table8 select Table4.year, Table4.month, IFNULL(Table5.counts,0) as counts from Table4 left join Table5 on Table4.year=Table5.year and Table4.month=Table5.month;"    query6 = "CREATE TEMPORARY TABLE Table9 select Table4.year, Table4.month, IFNULL(Table7.counts,0) as counts from Table4 left join Table7 on Table4.year=Table7.year and Table4.month=Table7.month;"    query7 = "SELECT Table8.year, Table8.month, Table8.counts as animal_control_counts, Table9.counts as adopt_animal_rescue_counts from Table8, Table9 where Table8.year=Table9.year and Table8.month=Table9.month order by year, month;"     cur = mysql.connection.cursor()    cur.execute(query1)    cur.execute(query2)    cur.execute(query3)    cur.execute(query4)    cur.execute(query5)    cur.execute(query6)    cur.execute(query7)    rv = cur.fetchall()    final_result= list()    for row in rv:        index = rv.index(row)        row_result = dict()        row_result['key'] = index        row_result["year"] = row[0]        row_result["month"] = row[1]        row_result["animal_control_counts"] = row[2]        row_result["adopt_animal_rescue"] = row[3]        final_result.append(row_result)     return jsonify({"animal_control_count":final_result})  @app.route('/animal-control-detail', methods=['POST'])def animal_control_detail():    data = request.json    year = data.get("year")    month = data.get("month")    query = """SELECT a.petID, a.species, a.sex, a.alternation_status, a.surrender_date, a.microchip_id, s.breed_types                FROM Animal a                INNER JOIN                (                    SELECT petID, GROUP_CONCAT(breed_name order by breed_name asc SEPARATOR '/') AS breed_types                     FROM BreedAnimal GROUP BY petID                ) s                 ON a.petID=s.petID                 WHERE MONTH(surrender_date)={} AND YEAR(surrender_date)={}                and a.by_animal_control=1;""".format(month, year)    cur = mysql.connection.cursor()    cur.execute(query)    rv = cur.fetchall()    final_result= list()    for row in rv:        index = rv.index(row)        row_result = dict()        row_result['key'] = index        row_result["petID"] = row[0]        row_result["species"] = row[1]        row_result["sex"] = row[2]        row_result["alternation_status"] = row[3]        row_result["surrender_date"] = row[4].strftime("%Y-%m-%d")        row_result["microchip_id"] = row[5]        row_result["breeds"] = row[6]         final_result.append(row_result)     return jsonify({"animal_contril_detail":final_result})  @app.route('/rescue-days-report', methods=['POST'])def rescue_days_report():    data = request.json    year = data.get("year")    month = data.get("month")    query = """SELECT c.petID, c.species, c.sex, c.alternation_status, c.surrender_date, c.microchip_id, c.breed_types, DATEDIFF(d. adoption_date, c.surrender_date) as in_resuce_days             FROM (            SELECT a.petID, a.name, a.species, a.sex, a.alternation_status, a.age, a.surrender_date, a.microchip_id, s.breed_types             FROM Animal a             INNER JOIN (                SELECT petID, GROUP_CONCAT(breed_name order by breed_name asc SEPARATOR '/') AS breed_types                 FROM BreedAnimal                GROUP BY petID) s                 ON a.petID=s.petID) c                     INNER JOIN Adoption d                 ON c.petID=d.petID             WHERE MONTH(d.adoption_date)={} AND YEAR(d.adoption_date)={} AND DATEDIFF(d. adoption_date, c.surrender_date) >=60;""".format(month, year)     cur = mysql.connection.cursor()    cur.execute(query)    rv = cur.fetchall()    final_result= list()    for row in rv:        index = rv.index(row)        row_result = dict()        row_result['key'] = index        row_result["petID"] = row[0]        row_result["species"] = row[1]        row_result["sex"] = row[2]        row_result["alternation_status"] = row[3]        row_result["surrender_date"] = row[4].strftime("%Y-%m-%d")        row_result["microchip_id"] = row[5]        row_result["breeds"] = row[6]        row_result["in_rescue_days"] = row[7]        final_result.append(row_result)     return jsonify({"rescue_count":final_result}) @app.route('/volunteer-month-report', methods=['POST'])def volunteer_of_the_month_report():    data = request.json    year = data.get("year")    month = data.get("month")    query1 = "CREATE TEMPORARY TABLE NewTable1 select a.username, a.u_f_name, a.u_l_name, a.email, b.total_hours from User as a inner join (select username, MONTH(work_date) as month, YEAR(work_date) as year, sum(time_worked) as total_hours from VolunteerHours where MONTH(work_date)={} and YEAR(work_date)={} group by username, month, year) as b on a.username=b.username order by total_hours DESC, u_l_name LIMIT 4;".format(month, year)    query2 = "select a.username, a.u_f_name, a.u_l_name, a.email, b.total_hours from User as a inner join (select username, MONTH(work_date) as month, YEAR(work_date) as year, sum(time_worked) as total_hours from VolunteerHours where MONTH(work_date)={} and YEAR(work_date)={} group by username, month, year) as b on a.username=b.username order by total_hours DESC, u_l_name LIMIT 4,1;".format(month, year)    cur = mysql.connection.cursor()    cur.execute(query1)    cur.execute(query2)    rv = cur.fetchall()    hours = rv[0][4]    query3 = "CREATE TEMPORARY TABLE NewTable2 select * from (select a.username, a.u_f_name, a.u_l_name, a.email, b.total_hours from User as a inner join (select username, MONTH(work_date) as month, YEAR(work_date) as year, sum(time_worked) as total_hours from VolunteerHours where MONTH(work_date)={} and YEAR(work_date)={} group by username, month, year) as b on a.username=b.username order by total_hours DESC, u_l_name) a where total_hours={};".format(month, year, hours)        query4 = "select * from NewTable1 UNION select * from NewTable2;"    cur = mysql.connection.cursor()    cur.execute(query3)    cur.execute(query4)    rv = cur.fetchall()    final_result= list()    for row in rv:        row_result = dict()        row_result["username"] = row[0]        row_result["u_firstname"] = row[1]        row_result["u_lastname"] = row[2]        row_result["email"] = row[3]        row_result["total_hours"] = row[4]        final_result.append(row_result)     return jsonify({"volunteer_month":final_result}) @app.route('/monthly-adoption-report',methods=['GET'])def monthlyAdoptionReport():    cur = mysql.connection.cursor()     cur.execute("CREATE TEMPORARY TABLE NewTable3 SELECT * FROM (SELECT YEAR(CURDATE()- INTERVAL 12 MONTH) as year, MONTH(CURDATE()- INTERVAL 12 MONTH) as month UNION SELECT YEAR(CURDATE()- INTERVAL 11 MONTH) as year, MONTH(CURDATE()- INTERVAL 11 MONTH) as month UNION SELECT YEAR(CURDATE()- INTERVAL 10 MONTH) as year, MONTH(CURDATE()- INTERVAL 10 MONTH) as month UNION SELECT YEAR(CURDATE()- INTERVAL 9 MONTH) as year, MONTH(CURDATE()- INTERVAL 9 MONTH) as month UNION SELECT YEAR(CURDATE()- INTERVAL 8 MONTH) as year, MONTH(CURDATE()- INTERVAL 8 MONTH) as month UNION SELECT YEAR(CURDATE()- INTERVAL 7 MONTH) as year, MONTH(CURDATE()- INTERVAL 7 MONTH) as month UNION SELECT YEAR(CURDATE()- INTERVAL 6 MONTH) as year, MONTH(CURDATE()- INTERVAL 6 MONTH) as month UNION SELECT YEAR(CURDATE()- INTERVAL 5 MONTH) as year, MONTH(CURDATE()- INTERVAL 5 MONTH) AS month UNION SELECT YEAR(CURDATE()- INTERVAL 4 MONTH) as year, MONTH(CURDATE()- INTERVAL 4 MONTH) AS month UNION SELECT YEAR(CURDATE()- INTERVAL 3 MONTH) as year, MONTH(CURDATE()- INTERVAL 3 MONTH) AS month UNION SELECT YEAR(CURDATE()- INTERVAL 2 MONTH) as year, MONTH(CURDATE()- INTERVAL 2 MONTH) AS month UNION SELECT YEAR(CURDATE()- INTERVAL 1 MONTH) as year, MONTH(CURDATE()- INTERVAL 1 MONTH) AS month)  as A join (SELECT 'Cat' as species UNION SELECT 'Dog' as species) as B;")    cur.execute("CREATE TEMPORARY TABLE NewTable6 SELECT a.species, YEAR(a.surrender_date) "+                "AS year, MONTH(a.surrender_date) AS month, s.breed_types, COUNT(1) AS "+                "surrender_number FROM Animal a INNER JOIN (SELECT petID, GROUP_CONCAT(breed_name "+                "order by breed_name asc SEPARATOR '/') AS breed_types FROM BreedAnimal GROUP BY petID) s ON "+                "a.petID=s.petID WHERE DATE(surrender_date) Between DATE_ADD(DATE_ADD(LAST_DAY(NOW())"+                ",INTERVAL 1 DAY),INTERVAL - 13 MONTH) AND LAST_DAY(DATE_ADD(NOW(),INTERVAL -1 MONTH)) "+                "GROUP BY species, breed_types, year, month;")         cur.execute("CREATE TEMPORARY TABLE NewTable4 select NewTable3.species, NewTable3.year, NewTable3.month, NewTable6.breed_types, IFNULL(surrender_number,0) as surrender_number from NewTable3 left join NewTable6 on NewTable3.species=NewTable6.species and NewTable3.year=NewTable6.year and NewTable3.month=NewTable6.month;")        cur.execute("CREATE TEMPORARY TABLE NewTable7 SELECT c.species, c.breed_types, d.year, d.month, count(1)"+                "AS adoption_number FROM (SELECT a.petID, a.name, a.species, a.sex, a.alternation_status, "+                "a.age, a.surrender_date, a.microchip_id, s.breed_types FROM Animal a INNER JOIN (SELECT "+                "petID, GROUP_CONCAT(breed_name order by breed_name asc SEPARATOR '/') AS breed_types FROM BreedAnimal "+                "GROUP BY petID) s ON a.petID=s.petID) c LEFT JOIN (SELECT YEAR(adoption_date) AS year, MONTH"+                "(adoption_date) AS month, petID FROM adoption WHERE DATE(adoption_date) BETWEEN "+                "DATE_ADD(DATE_ADD(LAST_DAY(NOW()),INTERVAL 1 DAY),INTERVAL - 13 MONTH) AND LAST_DAY("+                "DATE_ADD(NOW(),INTERVAL -1 MONTH))) d ON c.petID = d.petID GROUP BY species, breed_types, year, month;")     cur.execute("CREATE TEMPORARY TABLE NewTable8 SELECT CASE WHEN YEAR(CURDATE()- INTERVAL 1 MONTH)=a.year "+                "AND MONTH(CURDATE()-INTERVAL 1 MONTH)=a.month THEN 'previous_month01' "+                "WHEN YEAR(CURDATE()- INTERVAL 2 MONTH)=a.year AND MONTH(CURDATE()- "+                "INTERVAL 2 MONTH)=a.month THEN 'previous_month02' "+                "WHEN YEAR(CURDATE()- INTERVAL 3 MONTH)=a.year AND MONTH(CURDATE()- "+                "INTERVAL 3 MONTH)=a.month THEN 'previous_month03' "+                "WHEN YEAR(CURDATE()- INTERVAL 4 MONTH)=a.year AND MONTH(CURDATE()- "+                "INTERVAL 4 MONTH)=a.month THEN 'previous_month04' "+                "WHEN YEAR(CURDATE()- INTERVAL 5 MONTH)=a.year AND MONTH(CURDATE()- "+                "INTERVAL 5 MONTH)=a.month THEN 'previous_month05' "+                "WHEN YEAR(CURDATE()- INTERVAL 6 MONTH)=a.year AND MONTH(CURDATE()- "+                "INTERVAL 6 MONTH)=a.month THEN 'previous_month06' "+                "WHEN YEAR(CURDATE()- INTERVAL 7 MONTH)=a.year AND MONTH(CURDATE()- "+                "INTERVAL 7 MONTH)=a.month THEN 'previous_month07' "+                "WHEN YEAR(CURDATE()- INTERVAL 8 MONTH)=a.year AND MONTH(CURDATE()- "+                "INTERVAL 8 MONTH)=a.month THEN 'previous_month08' "+                "WHEN YEAR(CURDATE()- INTERVAL 9 MONTH)=a.year AND MONTH(CURDATE()- "+                "INTERVAL 9 MONTH)=a.month THEN 'previous_month09' "+                "WHEN YEAR(CURDATE()- INTERVAL 10 MONTH)=a.year AND MONTH(CURDATE()- "+                "INTERVAL 10 MONTH)=a.month THEN 'previous_month10' "+                "WHEN YEAR(CURDATE()- INTERVAL 11 MONTH)=a.year AND MONTH(CURDATE()- "+                "INTERVAL 11 MONTH)=a.month THEN 'previous_month11' "+                "WHEN YEAR(CURDATE()- INTERVAL 12 MONTH)=a.year AND MONTH(CURDATE()- "+                "INTERVAL 12 MONTH)=a.month THEN 'previous_month12' "+                "ELSE 'unknown' END AS 'month_name_row', "+                "CONCAT(a.year,'-',LPAD(a.month, 2, '0')) AS 'month_name', "+                "a.species, a.breed_types, a.surrender_number, IFNULL(b.adoption_number, 0) AS adoption_number "+                "FROM NewTable4 a LEFT JOIN NewTable7 b ON a.species=b.species AND "+                "a.breed_types=b.breed_types AND a.year=b.year AND a.month=b.month ORDER BY month_name "+                "ASC, species ASC, breed_types ASC; ")         cur.execute("CREATE TEMPORARY TABLE NewTable11 select month_name, species, sum(surrender_number) as surrender_count_by_species, sum(adoption_number) adoption_count_by_species from NewTable8 group by month_name, species;")    cur.execute("select NewTable8.month_name, NewTable8.species, NewTable8.breed_types, NewTable8.surrender_number, NewTable8.adoption_number, NewTable11.surrender_count_by_species, NewTable11.adoption_count_by_species from NewTable8, NewTable11 where NewTable8.month_name=NewTable11.month_name and NewTable8.species=NewTable11.species;")    rv=cur.fetchall()    result_list = list()    for row in rv:        index = rv.index(row)               row_result = dict()        row_result['key'] = index        row_result["month_name"] = row[0]        row_result["species"] = row[1]        row_result["breeds"] = row[2]        row_result["surrender_number"] = row[3]        row_result["adopted_number"] = row[4]        row_result["surrender_count_by_species"] =int(row[5])        row_result["adoption_count_by_species"] = int(row[6])        result_list.append(row_result)     cur.execute("SELECT species, breed_types, "+                "SUM(if(month_name_row='previous_month01', surrender_number, 0)) AS "+                "previous_month1_surrender_number, "+                "SUM(if(month_name_row='previous_month02', surrender_number, 0)) AS "+                "previous_month2_surrender_number, "+                "SUM(if(month_name_row='previous_month03', surrender_number, 0)) AS "+                "previous_month3_surrender_number, "+                "SUM(if(month_name_row='previous_month04', surrender_number, 0)) AS "+                "previous_month4_surrender_number, "+                "SUM(if(month_name_row='previous_month05', surrender_number, 0)) AS "+                "previous_month5_surrender_number, "+                "SUM(if(month_name_row='previous_month06', surrender_number, 0)) AS "+                "previous_month6_surrender_number, "+                "SUM(if(month_name_row='previous_month07', surrender_number, 0)) AS "+                "previous_month7_surrender_number, "+                "SUM(if(month_name_row='previous_month08', surrender_number, 0)) AS "+                "previous_month8_surrender_number, "+                "SUM(if(month_name_row='previous_month09', surrender_number, 0)) AS "+                "previous_month9_surrender_number, "+                "SUM(if(month_name_row='previous_month10', surrender_number, 0)) AS "+                "previous_month10_surrender_number, "+                "SUM(if(month_name_row='previous_month11', surrender_number, 0)) AS "+                "previous_month11_surrender_number, "+                "SUM(if(month_name_row='previous_month12', surrender_number, 0)) AS "+                "previous_month12_surrender_number, "+                "SUM(if(month_name_row='previous_month01', adoption_number, 0)) AS "+                "previous_month1_adoption_number, "+                "SUM(if(month_name_row='previous_month02', adoption_number, 0)) AS "+                "previous_month2_adoption_number, "+                "SUM(if(month_name_row='previous_month03', adoption_number, 0)) AS "+                "previous_month3_adoption_number, "+                "SUM(if(month_name_row='previous_month04', adoption_number, 0)) AS "+                "previous_month4_adoption_number, "+                "SUM(if(month_name_row='previous_month05', adoption_number, 0)) AS "+                "previous_month5_adoption_number, "+                "SUM(if(month_name_row='previous_month06', adoption_number, 0)) AS "+                "previous_month6_adoption_number, "+                "SUM(if(month_name_row='previous_month07', adoption_number, 0)) AS "+                "previous_month7_adoption_number, "+                "SUM(if(month_name_row='previous_month08', adoption_number, 0)) AS "+                "previous_month8_adoption_number, "+                "SUM(if(month_name_row='previous_month09', adoption_number, 0)) AS "+                "previous_month9_adoption_number, "+                "SUM(if(month_name_row='previous_month10', adoption_number, 0)) AS "+                "previous_month10_adoption_number, "+                "SUM(if(month_name_row='previous_month11', adoption_number, 0)) AS "+                "previous_month11_adoption_number, "+                "SUM(if(month_name_row='previous_month12', adoption_number, 0)) AS "+                "previous_month12_adoption_number "+                "FROM NewTable8 "+                "GROUP BY species, breed_types ORDER BY species, breed_types;")    ad=cur.fetchall()    ad_list = list()    for row in ad:        ad_dict = dict()        ad_dict["species"] = row[0]        ad_dict["breed_types"] = row[1]        if not row[1]:            continue        index = ad.index(row)        ad_dict['key'] = index        ad_dict["previous_month1_surrender_number"] = int(row[2])        ad_dict["previous_month2_surrender_number"] = int(row[3])        ad_dict["previous_month3_surrender_number"] = int(row[4])        ad_dict["previous_month4_surrender_number"] = int(row[5])        ad_dict["previous_month5_surrender_number"] = int(row[6])        ad_dict["previous_month6_surrender_number"] = int(row[7])        ad_dict["previous_month7_surrender_number"] = int(row[8])        ad_dict["previous_month8_surrender_number"] = int(row[9])        ad_dict["previous_month9_surrender_number"] = int(row[10])        ad_dict["previous_month10_surrender_number"] = int(row[11])        ad_dict["previous_month11_surrender_number"] = int(row[12])        ad_dict["previous_month12_surrender_number"] = int(row[13])        ad_dict["previous_month1_adoption_number"] = int(row[14])        ad_dict["previous_month2_adoption_number"] = int(row[15])        ad_dict["previous_month3_adoption_number"] = int(row[16])        ad_dict["previous_month4_adoption_number"] = int(row[17])        ad_dict["previous_month5_adoption_number"] = int(row[18])        ad_dict["previous_month6_adoption_number"] = int(row[19])        ad_dict["previous_month7_adoption_number"] = int(row[20])        ad_dict["previous_month8_adoption_number"] = int(row[21])        ad_dict["previous_month9_adoption_number"] = int(row[22])        ad_dict["previous_month10_adoption_number"] = int(row[23])        ad_dict["previous_month11_adoption_number"] = int(row[24])        ad_dict["previous_month12_adoption_number"] = int(row[25])        ad_list.append(ad_dict)     cur.execute("SELECT species, "+                "SUM(if(month_name_row='previous_month01', surrender_number, 0)) AS "+                "previous_month1_surrender_number, "+                "SUM(if(month_name_row='previous_month02', surrender_number, 0)) AS "+                "previous_month2_surrender_number, "+                "SUM(if(month_name_row='previous_month03', surrender_number, 0)) AS "+                "previous_month3_surrender_number, "+                "SUM(if(month_name_row='previous_month04', surrender_number, 0)) AS "+                "previous_month4_surrender_number, "+                "SUM(if(month_name_row='previous_month05', surrender_number, 0)) AS "+                "previous_month5_surrender_number, "+                "SUM(if(month_name_row='previous_month06', surrender_number, 0)) AS "+                "previous_month6_surrender_number, "+                "SUM(if(month_name_row='previous_month07', surrender_number, 0)) AS "+                "previous_month7_surrender_number, "+                "SUM(if(month_name_row='previous_month08', surrender_number, 0)) AS "+                "previous_month8_surrender_number, "+                "SUM(if(month_name_row='previous_month09', surrender_number, 0)) AS "+                "previous_month9_surrender_number, "+                "SUM(if(month_name_row='previous_month10', surrender_number, 0)) AS "+                "previous_month10_surrender_number, "+                "SUM(if(month_name_row='previous_month11', surrender_number, 0)) AS "+                "previous_month11_surrender_number, "+                "SUM(if(month_name_row='previous_month12', surrender_number, 0)) AS "+                "previous_month12_surrender_number, "+                "SUM(if(month_name_row='previous_month01', adoption_number, 0)) AS "+                "previous_month1_adoption_number, "+                "SUM(if(month_name_row='previous_month02', adoption_number, 0)) AS "+                "previous_month2_adoption_number, "+                "SUM(if(month_name_row='previous_month03', adoption_number, 0)) AS "+                "previous_month3_adoption_number, "+                "SUM(if(month_name_row='previous_month04', adoption_number, 0)) AS "+                "previous_month4_adoption_number, "+                "SUM(if(month_name_row='previous_month05', adoption_number, 0)) AS "+                "previous_month5_adoption_number, "+                "SUM(if(month_name_row='previous_month06', adoption_number, 0)) AS "+                "previous_month6_adoption_number, "+                "SUM(if(month_name_row='previous_month07', adoption_number, 0)) AS "+                "previous_month7_adoption_number, "+                "SUM(if(month_name_row='previous_month08', adoption_number, 0)) AS "+                "previous_month8_adoption_number, "+                "SUM(if(month_name_row='previous_month09', adoption_number, 0)) AS "+                "previous_month9_adoption_number, "+                "SUM(if(month_name_row='previous_month10', adoption_number, 0)) AS "+                "previous_month10_adoption_number, "+                "SUM(if(month_name_row='previous_month11', adoption_number, 0)) AS "+                "previous_month11_adoption_number, "+                "SUM(if(month_name_row='previous_month12', adoption_number, 0)) AS "+                "previous_month12_adoption_number "+                "FROM NewTable8 "+                "GROUP BY species ORDER BY species;")     ad_species=cur.fetchall()    ad_species_list = list()    for row in ad_species:        ad_dict = dict()        ad_dict["species"] = row[0]        index = ad_species.index(row)        ad_dict['key'] = index        ad_dict["previous_month1_surrender_number"] = int(row[1])        ad_dict["previous_month2_surrender_number"] = int(row[2])        ad_dict["previous_month3_surrender_number"] = int(row[3])        ad_dict["previous_month4_surrender_number"] = int(row[4])        ad_dict["previous_month5_surrender_number"] = int(row[5])        ad_dict["previous_month6_surrender_number"] = int(row[6])        ad_dict["previous_month7_surrender_number"] = int(row[7])        ad_dict["previous_month8_surrender_number"] = int(row[8])        ad_dict["previous_month9_surrender_number"] = int(row[9])        ad_dict["previous_month10_surrender_number"] = int(row[10])        ad_dict["previous_month11_surrender_number"] = int(row[11])        ad_dict["previous_month12_surrender_number"] = int(row[12])        ad_dict["previous_month1_adoption_number"] = int(row[13])        ad_dict["previous_month2_adoption_number"] = int(row[14])        ad_dict["previous_month3_adoption_number"] = int(row[15])        ad_dict["previous_month4_adoption_number"] = int(row[16])        ad_dict["previous_month5_adoption_number"] = int(row[17])        ad_dict["previous_month6_adoption_number"] = int(row[18])        ad_dict["previous_month7_adoption_number"] = int(row[19])        ad_dict["previous_month8_adoption_number"] = int(row[20])        ad_dict["previous_month9_adoption_number"] = int(row[21])        ad_dict["previous_month10_adoption_number"] = int(row[22])        ad_dict["previous_month11_adoption_number"] = int(row[23])        ad_dict["previous_month12_adoption_number"] = int(row[24])        ad_species_list.append(ad_dict)     return jsonify({"Monthly_adopt_Report": result_list, "report_column": ad_list, "report_species_column": ad_species_list})  @app.route('/volunteerlookup', methods=['POST'])def volunteerlookup():    data = request.json    search_text = data.get('search')    volunteerlookup_query = "SELECT u_f_name, u_l_name, email, phone FROM User where is_volunteer=1 and (u_f_name LIKE '%{}%' OR u_l_name LIKE '%{}%') ORDER BY u_l_name ASC, u_f_name ASC;".format(search_text, search_text)    try:        cur = mysql.connection.cursor()        cur.execute(volunteerlookup_query)        rv = cur.fetchall()        volunteer_list = list ()        for row in rv:            index = rv.index(row)            row_dict = dict()            row_dict['key'] = index            row_dict['first_name'] = row[0]            row_dict['last_name'] = row[1]            row_dict['email'] = row[2]            row_dict['phone'] = row[3]            volunteer_list.append(row_dict)        return jsonify ({"Volunteer":volunteer_list})    except Exception as e:        return jsonify ({"msg":"Cannot find the volunteer"}),400 @app.route('/vaccine-reminder')def vaccineReminder():    query1 = "CREATE TEMPORARY TABLE NewTable10 select petID, type, expiration_date, u_f_name, u_l_name from Vaccination, User  WHERE Vaccination.username=User.username AND expiration_date BETWEEN DATE_ADD(DATE_ADD(LAST_DAY(NOW()),INTERVAL 1 DAY),INTERVAL - 1 MONTH) AND DATE_ADD(LAST_DAY(NOW()),INTERVAL 3 month);"    query2 = "CREATE TEMPORARY TABLE NewTable11 SELECT Animal.petID, Animal.species, Animal.sex, Animal.alternation_status, Animal.surrender_date, Animal.microchip_id, GROUP_CONCAT(breed_name SEPARATOR '/') AS breed_name FROM BreedAnimal, Animal WHERE BreedAnimal.petID=Animal.petID GROUP BY petID;"    query3 = "Select type, expiration_date, NewTable10.petID, species, breed_name, sex, alternation_status, microchip_id, surrender_date, u_f_name, u_l_name from NewTable10, NewTable11 where NewTable10.petID=NewTable11.petID ORDER BY expiration_date ASC, petID ASC;"    try:        cur = mysql.connection.cursor()        cur.execute(query1)        cur.execute(query2)        cur.execute(query3)        rv = cur.fetchall()        final_result = list ()        for row in rv:            index = rv.index(row)            row_dict = dict()            row_dict['key'] = index            row_dict['type'] = row[0]            row_dict['expiration_date'] = row[1].strftime("%Y-%m-%d")            row_dict['petID'] = row[2]            row_dict['species'] = row[3]            row_dict['breed_name'] = row[4]            row_dict['sex'] = row[5]            row_dict['alternation_status'] = row[6]            row_dict['microchip_id'] = row[7]            row_dict['surrender_date'] = row[8].strftime("%Y-%m-%d")            row_dict['u_f_name'] = row[9]            row_dict['u_l_name'] = row[10]             final_result.append(row_dict)        return jsonify ({"vaccine_reminder":final_result})    except Exception as e:        return jsonify ({"msg":"Cannot find the vaccine  reminder"}),400  app.run(port=5000)                              